{"version":3,"file":"OsbGeoWeather.js","sourceRoot":"","sources":["../src/OsbGeoWeather.ts"],"names":[],"mappings":"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","sourcesContent":["import {Component} from '@angular/core';\nimport { Http, HTTP_PROVIDERS } from '@angular/http';\n\n@Component({\n    selector: 'osb-geo-weather',\n    templateUrl: 'vendor/osb-geo-weather/lib/OsbGeoWeather.html',\n    styleUrls: ['vendor/osb-geo-weather/lib/OsbGeoWeather.css']\n})\nexport class OsbGeoWeather {\n    isLoading = true;\n    forecastLoading = true;\n    googleMapsApiBase = '';\n    googleMapsApiKey  = '';\n    weatherApiBase = '';\n    weatherApiKey = '';\n    weatherData = {};\n    forecastData = {};\n\n    constructor(public http: Http) {\n        this.isLoading = true;\n        this.forecastLoading = true;\n        this.googleMapsApiBase = 'https://maps.googleapis.com/maps/api/geocode/json?latlng=';\n        this.googleMapsApiKey  = 'AIzaSyDI-MPoDrmVJnK2qAYtDZr9aR9pOzHCSiI';\n        this.weatherApiBase = 'http://api.openweathermap.org/data/2.5/';\n        this.weatherApiKey = '893dd0afe360cf42975f84a9b97cd4ec';\n        this.weatherData = {};\n        this.forecastData = {};\n        this.getLocation();\n    }\n    // Get Today's weather from openWeatherApi\n    getTodayWeather(location) {\n        this.http.get(this.weatherApiBase + 'weather?q=' + location + '&units=metric&APPID=' + this.weatherApiKey)\n            .subscribe(response => this.setTodayWeather(response));\n    }\n    // Set Today's weather\n    setTodayWeather(weather) {\n        this.weatherData = weather.json();\n        this.isLoading = false;\n    }\n    // Get Weather forecast from openWeatherApi\n    getWeatherForecast(location) {\n        this.http.get(this.weatherApiBase + 'forecast/daily?q=' + location + '&units=metric&APPID=' + this.weatherApiKey)\n            .subscribe(response => this.setWeatherForecast(response));\n    }\n    // Set Weather forecast\n    setWeatherForecast(forecast) {\n        this.forecastData = forecast.json();\n        this.forecastLoading = false;\n    }\n    // Get location from device or default then get long/lat from Google Maps\n    getLocation() {\n        if ('geolocation' in navigator) {\n            //console.log('Has geolocation');\n            var holder = this;\n            // Get Location from Google if available else use default\n            navigator.geolocation.getCurrentPosition(function(position) {\n                holder.http.get(holder.googleMapsApiBase + position.coords.latitude + ',' + position.coords.longitude + '&key=' + holder.googleMapsApiKey)\n                    .subscribe(response => holder.setLocation(response));\n            });\n        } else {\n            console.log('No geolocation');\n        }\n    }\n    // Set location\n    setLocation(location) {\n        var data = location.json();\n        this.getTodayWeather(data.results[0].address_components[3].long_name);\n        this.getWeatherForecast(data.results[0].address_components[3].long_name);\n    }\n\n}"]}